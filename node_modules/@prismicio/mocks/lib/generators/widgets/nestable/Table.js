"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableMock = void 0;
const content_1 = require("@prismicio/types-internal/lib/content");
const customtypes_1 = require("@prismicio/types-internal/lib/customtypes");
const diff_1 = require("@prismicio/types-internal/lib/customtypes/diff");
const uuid_1 = require("uuid");
const RichText_1 = require("./RichText");
exports.TableMock = {
    generate(_def, config) {
        var _a;
        /**
         * We decided to keep a small table with a fixed size, and some opinionated
         * content for the cells, so it looks good in the SM simulator.
         */
        const columns = 2;
        return {
            __TYPE__: "TableContent",
            content: (_a = config === null || config === void 0 ? void 0 : config.value) !== null && _a !== void 0 ? _a : [
                {
                    key: (0, uuid_1.v4)(),
                    type: "tableRow",
                    content: mockTableCells({ length: columns, type: "tableHeader" }),
                },
                {
                    key: (0, uuid_1.v4)(),
                    type: "tableRow",
                    content: mockTableCells({ length: columns, type: "tableCell" }),
                },
            ],
        };
    },
    applyPatch(data) {
        var _a;
        if (data.diff.op === diff_1.DiffOperation.Removed)
            return { result: undefined };
        if (data.diff.value.type === "Table") {
            const patched = this.patch(data.diff, (0, content_1.isTableContent)(data.content) ? data.content : undefined, ((_a = data.config) === null || _a === void 0 ? void 0 : _a.type) === "Table" ? data.config : undefined);
            return { result: patched };
        }
        return;
    },
    patch(diff, _content, config) {
        switch (diff.op) {
            case diff_1.DiffOperation.Removed:
                return;
            case diff_1.DiffOperation.Updated:
            case diff_1.DiffOperation.Added:
                return this.generate(diff.value, config);
        }
    },
};
const pattern = {
    tableHeader: "TABLE_HEADER",
    tableCell: "TABLE_CELL",
};
const mockTableCells = ({ length, type, }) => Array.from({ length }, () => ({
    key: (0, uuid_1.v4)(),
    type,
    content: RichText_1.RichTextMock.generate(customtypes_1.TableCell, {
        type: "StructuredText",
        pattern: pattern[type],
    }),
}));
