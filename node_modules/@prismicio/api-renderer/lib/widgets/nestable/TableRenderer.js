"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const customtypes_1 = require("@prismicio/types-internal/lib/customtypes");
const StructuredTextContent_1 = tslib_1.__importDefault(require("./StructuredTextContent"));
const TableRenderer = (ctx) => ({
    renderV1(_content, _fetch) {
        // V1 is not supported for Table
        return null;
    },
    renderV2(_def, content, fetch) {
        const renderStructuredText = (cellContent) => (0, StructuredTextContent_1.default)(ctx).renderV2(customtypes_1.TableCell, cellContent, fetch);
        return renderTable(content, renderStructuredText);
    },
    renderDefault(_def) {
        return renderDefaultTable();
    },
    renderMocks(def, content) {
        return this.renderV2(def, content);
    },
});
function renderTable(table, renderStructuredText) {
    const firstRow = table.content[0];
    if (!firstRow)
        return renderDefaultTable();
    const isFirstRowHeader = firstRow.content.every((cell) => cell.type === "tableHeader");
    const headRow = isFirstRowHeader ? firstRow : undefined;
    const bodyRows = isFirstRowHeader ? table.content.slice(1) : table.content;
    return {
        ...(headRow ? { head: renderHead(headRow, renderStructuredText) } : {}),
        body: renderBody(bodyRows, renderStructuredText),
    };
}
function renderHead(row, renderStructuredText) {
    if (!row) {
        return undefined;
    }
    return {
        rows: [renderRow(row, renderStructuredText)],
    };
}
function renderBody(rows, renderStructuredText) {
    return {
        rows: rows.map((row) => {
            return renderRow(row, renderStructuredText);
        }),
    };
}
function renderRow(row, renderStructuredText) {
    return {
        key: row.key,
        cells: row.content.map((cell) => {
            return renderCell(cell, renderStructuredText);
        }),
    };
}
function renderCell(cell, renderStructuredText) {
    return {
        key: cell.key,
        type: CELL_TYPE_MAP[cell.type],
        content: renderStructuredText(cell.content),
    };
}
const CELL_TYPE_MAP = {
    tableHeader: "header",
    tableCell: "data",
};
function renderDefaultTable() {
    return null;
}
exports.default = TableRenderer;
