import { writeSliceModel, upsertGlobalTypeScriptTypes, writeSliceFile } from "@slicemachine/plugin-kit/fs";
import { source } from "common-tags";
import { checkIsTypeScriptProject } from "../lib/checkIsTypeScriptProject.js";
import { pascalCase } from "../lib/pascalCase.js";
import { rejectIfNecessary } from "../lib/rejectIfNecessary.js";
import { upsertSliceLibraryIndexFile } from "../lib/upsertSliceLibraryIndexFile.js";
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a, _b;
const createComponentFile = async ({ data, helpers, actions, options }) => {
  const pascalName = pascalCase(data.model.name);
  let contents;
  const isTypeScriptProject = await checkIsTypeScriptProject({
    helpers,
    options
  });
  const placeholder = `
		Placeholder component for {slice.slice_type} (variation: {slice.variation}) slices.
		<br />
		<strong>You can edit this slice directly in your code editor.</strong>
		<!--
	💡 Use Prismic MCP with your code editor

	Get AI-powered help to build your slice components — based on your actual model.

	▶️ Setup:
	1. Add a new MCP Server in your code editor:

	{
		"mcpServers": {
			"Prismic MCP": {
				"command": "npx",
				"args": ["-y", "@prismicio/mcp-server"]
			}
		}
	}

	2. Select Claude 3.7 Sonnet (recommended for optimal output)

	✅ Then open your slice file and ask your code editor:
		"Code this slice"

	Your code editor reads your slice model and helps you code faster ⚡
	📚 Give your feedback: https://community.prismic.io/t/help-us-shape-the-future-of-slice-creation/19505
-->`;
  if (data.componentContents) {
    contents = data.componentContents;
  } else if (isTypeScriptProject) {
    contents = source(_a || (_a = __template([`
			<script lang="ts">
				import type { Content } from '@prismicio/client';

				export let slice: Content.`, "Slice;\n			<\/script>\n\n			<section data-slice-type={slice.slice_type} data-slice-variation={slice.variation}>\n				", "\n			</section>\n		"])), pascalName, placeholder);
  } else {
    contents = source(_b || (_b = __template(['\n			<script>\n				/** @type {import("@prismicio/client").Content.', "Slice} */\n				export let slice;\n			<\/script>\n\n			<section data-slice-type={slice.slice_type} data-slice-variation={slice.variation}>\n				", "\n			</section>\n		"])), pascalName, placeholder);
  }
  await writeSliceFile({
    libraryID: data.libraryID,
    model: data.model,
    filename: "index.svelte",
    contents,
    format: options.format,
    actions,
    helpers,
    formatOptions: {
      prettier: {
        plugins: ["prettier-plugin-svelte"],
        parser: "svelte"
      }
    }
  });
};
const sliceCreate = async (data, context) => {
  rejectIfNecessary(await Promise.allSettled([
    writeSliceModel({
      libraryID: data.libraryID,
      model: data.model,
      format: context.options.format,
      helpers: context.helpers
    }),
    createComponentFile({ data, ...context })
  ]));
  rejectIfNecessary(await Promise.allSettled([
    upsertSliceLibraryIndexFile({
      libraryID: data.libraryID,
      ...context
    }),
    upsertGlobalTypeScriptTypes({
      filename: context.options.generatedTypesFilePath,
      format: context.options.format,
      helpers: context.helpers,
      actions: context.actions
    })
  ]));
};
export {
  sliceCreate
};
//# sourceMappingURL=slice-create.js.map
