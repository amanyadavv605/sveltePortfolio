{"version":3,"file":"git-host-info.cjs","sources":["../../../../../node_modules/read-pkg/node_modules/hosted-git-info/git-host-info.js"],"sourcesContent":["'use strict'\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : ''\nconst maybeEncode = (arg) => arg ? encodeURIComponent(arg) : ''\n\nconst defaults = {\n  sshtemplate: ({ domain, user, project, committish }) => `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, user, project, committish }) => `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({ domain, user, project, committish, treepath }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, user, project, committish, treepath, path, fragment, hashformat }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'master')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({ domain, user, project, treepath, committish }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ domain, user, project, committish, path }) => `https://${domain}/${user}/${project}/raw/${maybeEncode(committish) || 'master'}/${path}`,\n  shortcuttemplate: ({ type, user, project, committish }) => `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ user, project, committish }) => `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, user, project }) => `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment\n}\n\nconst gitHosts = {}\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  filetemplate: ({ auth, user, project, committish, path }) => `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish) || 'master'}/${path}`,\n  gittemplate: ({ auth, domain, user, project, committish }) => `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5)\n    if (type && type !== 'tree') {\n      return\n    }\n\n    if (!type) {\n      committish = url.hash.slice(1)\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish }\n  }\n})\n\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/get/${maybeEncode(committish) || 'master'}.tar.gz`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (['get'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  }\n})\n\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    const path = url.pathname.slice(1)\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return\n    }\n\n    const segments = path.split('/')\n    let project = segments.pop()\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    const user = segments.join('/')\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  }\n})\n\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  sshtemplate: ({ domain, project, committish }) => `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, project, committish }) => `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, project, committish, path, hashformat }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({ domain, project, committish }) => `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ user, project, committish, path }) => `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({ type, project, committish }) => `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ project, committish }) => `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, project }) => `https://${domain}/${project}`,\n  gittemplate: ({ domain, project, committish }) => `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ project, committish }) => `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (aux === 'raw') {\n      return\n    }\n\n    if (!project) {\n      if (!user) {\n        return\n      }\n\n      project = user\n      user = null\n    }\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment)\n  }\n})\n\ngitHosts.sourcehut = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'https:'],\n  domain: 'git.sr.ht',\n  treepath: 'tree',\n  browsefiletemplate: ({ domain, user, project, committish, treepath, path, fragment, hashformat }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'main')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  filetemplate: ({ domain, user, project, committish, path }) => `https://${domain}/${user}/${project}/blob/${maybeEncode(committish) || 'main'}/${path}`,\n  httpstemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/archive/${maybeEncode(committish) || 'main'}.tar.gz`,\n  bugstemplate: ({ domain, user, project }) => `https://todo.sr.ht/${user}/${project}`,\n  docstemplate: ({ domain, user, project, treepath, committish }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n\n    // tarball url\n    if (['archive'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  }\n})\n\nconst names = Object.keys(gitHosts)\ngitHosts.byShortcut = {}\ngitHosts.byDomain = {}\nfor (const name of names) {\n  gitHosts.byShortcut[`${name}:`] = name\n  gitHosts.byDomain[gitHosts[name].domain] = name\n}\n\nfunction formatHashFragment (fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-')\n}\n\nmodule.exports = gitHosts\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}