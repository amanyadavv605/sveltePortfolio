{"version":3,"file":"buildFieldDocs.cjs","sources":["../../../src/lib/buildFieldDocs.ts"],"sourcesContent":["import type { CustomTypeModelField } from \"@prismicio/client\";\n\nimport { FieldPath } from \"../types\";\n\nimport { FIELD_DOCUMENTATION_URLS } from \"../constants\";\n\nimport { addLine } from \"./addLine\";\nimport { getAPIIDPath } from \"./getAPIIDPath\";\nimport { getHumanReadableModelName } from \"./getHumanReadableModelName\";\nimport { getHumanReadablePath } from \"./getHumanReadablePath\";\n\ntype GetFieldHumanReadableTypeArgs = {\n\tfield: CustomTypeModelField;\n};\n\nfunction getHumanReadableFieldType(\n\targs: GetFieldHumanReadableTypeArgs,\n): string {\n\tswitch (args.field.type) {\n\t\tcase \"StructuredText\": {\n\t\t\tconst isTitleField =\n\t\t\t\targs.field.config &&\n\t\t\t\t\"single\" in args.field.config &&\n\t\t\t\targs.field.config.single &&\n\t\t\t\targs.field.config.single\n\t\t\t\t\t.split(\",\")\n\t\t\t\t\t.every((blockType) => /heading/.test(blockType));\n\n\t\t\treturn isTitleField ? \"Title\" : \"Rich Text\";\n\t\t}\n\n\t\tcase \"IntegrationFields\": {\n\t\t\tconst catalog = args.field.config?.catalog;\n\n\t\t\treturn `Integration Fields (Catalog: ${\n\t\t\t\tcatalog ? `\\`${catalog}\\`` : \"*unknown*\"\n\t\t\t})`;\n\t\t}\n\n\t\tcase \"Link\": {\n\t\t\tswitch (args.field.config?.select) {\n\t\t\t\tcase \"document\": {\n\t\t\t\t\treturn \"Content Relationship\";\n\t\t\t\t}\n\n\t\t\t\tcase \"media\": {\n\t\t\t\t\treturn \"Link to Media\";\n\t\t\t\t}\n\n\t\t\t\tdefault: {\n\t\t\t\t\treturn \"Link\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcase \"Slices\": {\n\t\t\treturn \"Slice Zone\";\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn args.field.type;\n\t\t}\n\t}\n}\n\ntype BuildFieldDocsArgs = {\n\tname: string;\n\tfield: CustomTypeModelField;\n\tpath: FieldPath;\n\ttabName?: string;\n};\n\nexport function buildFieldDocs(args: BuildFieldDocsArgs): string {\n\tlet result = \"/**\";\n\n\tconst humanReadableName = getHumanReadableModelName({\n\t\tmodel: args.field,\n\t\tname: args.name,\n\t});\n\tconst humanReadablePath = getHumanReadablePath({ path: args.path });\n\tconst humanReadableFieldType = getHumanReadableFieldType({\n\t\tfield: args.field,\n\t});\n\n\tresult = addLine(\n\t\t` * ${humanReadableName} field in *${humanReadablePath}*`,\n\t\tresult,\n\t);\n\n\tresult = addLine(\" *\", result);\n\n\tresult = addLine(` * - **Field Type**: ${humanReadableFieldType}`, result);\n\n\tconst placeholder =\n\t\t(args.field.config &&\n\t\t\t\"placeholder\" in args.field.config &&\n\t\t\targs.field.config.placeholder) ||\n\t\t`*None*`;\n\tresult = addLine(` * - **Placeholder**: ${placeholder}`, result);\n\n\tconst defaultValue =\n\t\targs.field.config && \"default_value\" in args.field.config\n\t\t\t? args.field.config.default_value\n\t\t\t: undefined;\n\tif (defaultValue !== undefined) {\n\t\tconst stringifiedDefaultValue =\n\t\t\ttypeof defaultValue === \"boolean\" ? `${defaultValue}` : defaultValue;\n\n\t\tresult = addLine(\n\t\t\t` * - **Default Value**: ${stringifiedDefaultValue}`,\n\t\t\tresult,\n\t\t);\n\t}\n\n\tconst apiIDPath = getAPIIDPath({\n\t\tpath: [...args.path, { name: args.name, model: args.field }],\n\t});\n\tresult = addLine(` * - **API ID Path**: ${apiIDPath}`, result);\n\n\tif (args.tabName) {\n\t\tresult = addLine(` * - **Tab**: ${args.tabName}`, result);\n\t}\n\n\tconst documentationURL =\n\t\tFIELD_DOCUMENTATION_URLS[\n\t\t\targs.field.type as keyof typeof FIELD_DOCUMENTATION_URLS\n\t\t];\n\tif (documentationURL) {\n\t\tresult = addLine(` * - **Documentation**: ${documentationURL}`, result);\n\t}\n\n\tresult = addLine(\" */\", result);\n\n\treturn result;\n}\n"],"names":["getHumanReadableModelName","getHumanReadablePath","addLine","getAPIIDPath","FIELD_DOCUMENTATION_URLS"],"mappings":";;;;;;;AAeA,SAAS,0BACR,MAAmC;;AAE3B,UAAA,KAAK,MAAM,MAAM;AAAA,IACxB,KAAK,kBAAkB;AAChB,YAAA,eACL,KAAK,MAAM,UACX,YAAY,KAAK,MAAM,UACvB,KAAK,MAAM,OAAO,UAClB,KAAK,MAAM,OAAO,OAChB,MAAM,GAAG,EACT,MAAM,CAAC,cAAc,UAAU,KAAK,SAAS,CAAC;AAEjD,aAAO,eAAe,UAAU;AAAA,IACjC;AAAA,IAEA,KAAK,qBAAqB;AACnB,YAAA,WAAU,UAAK,MAAM,WAAX,mBAAmB;AAEnC,aAAO,gCACN,UAAU,KAAK,OAAO,OAAO,WAC9B;AAAA,IACD;AAAA,IAEA,KAAK,QAAQ;AACJ,eAAA,UAAK,MAAM,WAAX,mBAAmB,QAAQ;AAAA,QAClC,KAAK,YAAY;AACT,iBAAA;AAAA,QACR;AAAA,QAEA,KAAK,SAAS;AACN,iBAAA;AAAA,QACR;AAAA,QAEA,SAAS;AACD,iBAAA;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAAA,IAEA,KAAK,UAAU;AACP,aAAA;AAAA,IACR;AAAA,IAEA,SAAS;AACR,aAAO,KAAK,MAAM;AAAA,IACnB;AAAA,EACD;AACD;AASM,SAAU,eAAe,MAAwB;AACtD,MAAI,SAAS;AAEb,QAAM,oBAAoBA,0BAAAA,0BAA0B;AAAA,IACnD,OAAO,KAAK;AAAA,IACZ,MAAM,KAAK;AAAA,EAAA,CACX;AACD,QAAM,oBAAoBC,qBAAAA,qBAAqB,EAAE,MAAM,KAAK,MAAM;AAClE,QAAM,yBAAyB,0BAA0B;AAAA,IACxD,OAAO,KAAK;AAAA,EAAA,CACZ;AAED,WAASC,QAAAA,QACR,MAAM,iBAAiB,cAAc,iBAAiB,KACtD,MAAM;AAGE,WAAAA,QAAA,QAAQ,MAAM,MAAM;AAE7B,WAASA,QAAQ,QAAA,wBAAwB,sBAAsB,IAAI,MAAM;AAEnE,QAAA,cACJ,KAAK,MAAM,UACX,iBAAiB,KAAK,MAAM,UAC5B,KAAK,MAAM,OAAO,eACnB;AACD,WAASA,QAAQ,QAAA,yBAAyB,WAAW,IAAI,MAAM;AAEzD,QAAA,eACL,KAAK,MAAM,UAAU,mBAAmB,KAAK,MAAM,SAChD,KAAK,MAAM,OAAO,gBAClB;AACJ,MAAI,iBAAiB,QAAW;AAC/B,UAAM,0BACL,OAAO,iBAAiB,YAAY,GAAG,YAAY,KAAK;AAEzD,aAASA,QACR,QAAA,2BAA2B,uBAAuB,IAClD,MAAM;AAAA,EAER;AAEA,QAAM,YAAYC,aAAAA,aAAa;AAAA,IAC9B,MAAM,CAAC,GAAG,KAAK,MAAM,EAAE,MAAM,KAAK,MAAM,OAAO,KAAK,MAAA,CAAO;AAAA,EAAA,CAC3D;AACD,WAASD,QAAQ,QAAA,yBAAyB,SAAS,IAAI,MAAM;AAE7D,MAAI,KAAK,SAAS;AACjB,aAASA,QAAQ,QAAA,iBAAiB,KAAK,OAAO,IAAI,MAAM;AAAA,EACzD;AAEA,QAAM,mBACLE,UAAA,yBACC,KAAK,MAAM,IAA6C;AAE1D,MAAI,kBAAkB;AACrB,aAASF,QAAQ,QAAA,2BAA2B,gBAAgB,IAAI,MAAM;AAAA,EACvE;AAES,WAAAA,QAAA,QAAQ,OAAO,MAAM;AAEvB,SAAA;AACR;;"}